user  nginx;
worker_processes  1;

events {
    worker_connections 1024;
}

http {
    server {
        listen       80;
        server_name  localhost;

        # Локация для проверки токена
        location /auth/verify {
            internal;  # Этот location доступен только для внутренних запросов
            proxy_pass http://auth_service:8003/auth/auth/verify;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Локация для авторизации
        location /auth/ {
            proxy_pass http://auth_service:8003/;
            proxy_set_header X-Forwarded-Prefix /auth;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Локация для /api/docs без проверки авторизации
        location ~ ^/api/(docs|openapi\.json)$ {
            proxy_pass http://lostfound_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Локация для всех остальных /api/ с проверкой авторизации
        location /api/ {
            # Проверка авторизации перед проксированием
            auth_request /auth/verify;
            auth_request_set $user_id $upstream_http_x_user_id;  # Извлекаем user_id из заголовка
            auth_request_set $username $upstream_http_x_username;  # Извлекаем username из заголовка

            # Проксирование запроса на микросервис
            proxy_pass http://lostfound_service:8000/;
            proxy_set_header X-Forwarded-Prefix /api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Добавляем данные пользователя в заголовки запроса
            proxy_set_header X-User-ID $user_id;  # Передаем user_id
            proxy_set_header X-Username $username;  # Передаем username

            # Обработка ошибок авторизации
            error_page 401 = @error401;
            error_page 403 = @error403;
        }


        # Обработка ошибки 401 (Unauthorized)
        location @error401 {
            return 401 '{"error": "Unauthorized"}';
        }
#
#         # Обработка ошибки 403 (Forbidden)
        location @error403 {
            return 403 '{"error": "Forbidden"}';
        }
    }
}